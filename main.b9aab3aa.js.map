{"version":3,"sources":["src/canvas.ts","src/math/radian.ts","src/math/intersection.ts","src/ray.ts","src/lamp.ts","src/placer/cursor-position.state.ts","src/placer/mouse.placer.ts","src/segment.ts","src/polygon.ts","src/sight-zone.ts","src/scene.ts","src/game.ts","src/main.ts"],"names":[],"mappings":";AAEa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAb,IAAA,EAAA,WAII,SAAA,IACI,KAAK,QAAU,SAAS,cAAc,UACtC,KAAK,iBACL,KAAK,KAAO,KAAK,QAAQ,WAAW,MACpC,SAAS,KAAK,YAAY,KAAK,SAuBvC,OApBY,EAAA,UAAA,eAAR,WACI,KAAK,QAAQ,MAAQ,OAAO,WAC5B,KAAK,QAAQ,OAAS,OAAO,aAGjC,EAAA,UAAA,MAAA,WACI,KAAK,KAAK,UAAU,EAAG,EAAG,KAAK,QAAQ,MAAO,KAAK,QAAQ,QAC3D,KAAK,KAAK,UAAY,QACtB,KAAK,KAAK,SAAS,EAAG,EAAG,KAAK,QAAQ,MAAO,KAAK,QAAQ,SAG9D,EAAA,UAAA,eAAA,SAAe,GACX,KAAK,KAAK,yBAA2B,WACrC,KAAK,KAAK,UAAU,EAAK,EAAG,EAAG,KAAK,QAAQ,MAAO,KAAK,QAAQ,QAChE,KAAK,KAAK,yBAA2B,eAGzC,EAAA,UAAA,KAAA,SAAK,GAAL,IAAA,EAAA,KACI,EAAU,QAAQ,SAAA,GAAY,OAAA,EAAS,KAAK,EAAK,SAEzD,EA/BA,GAAa,QAAA,OAAA;;ACSQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,UAAA,QAAA,eAAA,EARd,IAAM,EAAY,SAAC,GAA4B,OAAE,EAAQ,KAAK,GAAM,KAA9D,QAAA,UAAS,EAEf,IAAM,EAAY,SAAC,GACtB,IAAM,EAAQ,EAAI,KAAK,GACjB,EAAa,EAAQ,EAC3B,OAAQ,GAAc,EAAI,EAAa,EAAa,GAH3C,QAAA,UAAS,EAMf,IAAM,EAAW,SAAC,EAAc,GACnC,OAAO,EAAA,QAAA,WAAU,KAAK,MAAM,EAAI,EAAI,EAAM,EAAG,EAAI,EAAI,EAAM,KADlD,QAAA,SAAQ;;ACHO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,iBAAA,EAJrB,IAAM,EAAc,SAAC,EAAU,GAClC,OAAO,EAAI,QAAU,EAAQ,OADpB,QAAA,YAAW,EAIjB,IAAM,EAAkB,SAAC,EAAU,GACtC,IAAI,EAAA,QAAA,aAAY,EAAK,GACjB,OAAO,KAGX,IAAM,EAAK,EAAI,MAAM,EACf,EAAK,EAAI,MAAM,EACf,EAAK,EAAI,MAAM,EAAI,KAAK,IAAI,EAAI,OAChC,EAAK,EAAI,MAAM,EAAI,KAAK,IAAI,EAAI,OAChC,EAAK,EAAQ,MAAM,EACnB,EAAK,EAAQ,MAAM,EACnB,EAAK,EAAQ,IAAI,EACjB,EAAK,EAAQ,IAAI,EAEjB,GAAe,EAAK,IAAO,EAAK,IAAO,EAAK,IAAO,EAAK,GAC9D,GAAoB,IAAhB,EACA,OAAO,KAGX,IAAM,IAAM,EAAK,IAAO,EAAK,IAAO,EAAK,IAAO,EAAK,IAAO,EACtD,KAAO,EAAK,IAAO,EAAK,IAAO,EAAK,IAAO,EAAK,IAAO,EAE7D,OAAI,GAAK,GAAK,GAAK,GAAK,GAAK,EAClB,CACH,EAAG,EAAK,GAAK,EAAK,GAClB,EAAG,EAAK,GAAK,EAAK,GAClB,SAAU,GAIX,MA9BE,QAAA,gBAAe;;ACDf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAJb,IAAA,EAAA,QAAA,iBAEA,EAAA,QAAA,uBAEA,EAAA,WAII,SAAA,EAA4B,EAA8B,GAA9B,KAAA,MAAA,EAA8B,KAAA,MAAA,EAHlD,KAAA,OAAiB,MACjB,KAAA,KAAqB,KAGzB,KAAK,OAAQ,EAAA,EAAA,WAAU,GAgC/B,OA7BI,OAAA,eAAI,EAAA,UAAA,MAAG,CAAP,IAAA,WACI,OAAO,KAAK,KACN,KAAK,KACL,CACI,EAAG,KAAK,MAAM,EAA2B,IAAvB,KAAK,IAAI,KAAK,OAChC,EAAG,KAAK,MAAM,EAA2B,IAAvB,KAAK,IAAI,KAAK,SAbrC,YAAA,EAAA,cAAA,IAiBT,EAAA,UAAA,KAAA,SAAK,GACD,EAAI,YAAc,KAAK,OACvB,EAAI,YACJ,EAAI,OAAO,KAAK,MAAM,EAAG,KAAK,MAAM,GACpC,EAAI,OAAO,KAAK,IAAI,EAAG,KAAK,IAAI,GAChC,EAAI,UAGR,EAAA,UAAA,KAAA,SAAK,GAAL,IAAA,EAAA,KACI,KAAK,KAAO,KACZ,IAAI,EAAS,EAAA,EAEb,EAAS,QAAQ,SAAC,GACd,IAAM,GAAe,EAAA,EAAA,iBAAgB,EAAM,GACvC,GAAgB,EAAa,SAAW,IACxC,EAAS,EAAa,SACtB,EAAK,KAAO,MAI5B,EArCA,GAAa,QAAA,IAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EARb,IAAA,EAAA,QAAA,iBAKA,EAAA,QAAA,SAGA,EAAA,WAGI,SAAA,EAA6B,GAAA,KAAA,UAAA,EAFrB,KAAA,UAAmB,CAAE,EAAG,EAAG,EAAG,GAiC1C,OA7BI,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WACI,OAAO,KAAK,WANP,YAAA,EAAA,cAAA,IAST,EAAA,UAAA,OAAA,WACI,KAAK,mBAGT,EAAA,UAAA,WAAA,SAAW,GAAX,IAAA,EAAA,KACU,EAAQ,EAAS,QAAQ,SAAA,GAAW,MAAA,CAAC,EAAQ,MAAO,EAAQ,OAC5D,EAAe,IAAI,IACrB,EAAM,QAAQ,SAAA,GACV,IAAM,GAAQ,EAAA,EAAA,UAAS,EAAK,UAAW,GACvC,MAAO,CAAC,EAAQ,KAAQ,EAAO,EAAQ,SAG/C,OAAO,MAAM,KAAK,GAAc,IAAI,SAAA,GAAS,OAAA,IAAI,EAAA,IAAI,EAAK,UAAW,MAGzE,EAAA,UAAA,KAAA,SAAK,GACD,EAAI,UAAY,SAChB,EAAI,YACJ,EAAI,IAAI,KAAK,UAAU,EAAG,KAAK,UAAU,EAAG,EAAG,EAAG,EAAI,KAAK,IAC3D,EAAI,QAGA,EAAA,UAAA,gBAAR,WACI,KAAK,UAAY,KAAK,aAE9B,EAlCA,GAAa,QAAA,KAAA;;ACQ+C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,yBAAA,EAd5D,IAAA,EAAA,WAGI,SAAA,IAAA,IAAA,EAAA,KAFQ,KAAA,UAAmB,CAAE,EAAG,EAAG,EAAG,GAGlC,OAAO,iBAAiB,YAAa,SAAC,GAClC,EAAK,UAAY,CAAE,EAAG,EAAM,QAAS,EAAG,EAAM,WAO1D,OAHI,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WACI,OAAO,KAAK,WAIwC,YAAA,EAAA,cAAA,IAF5D,EAZA,GAca,QAAA,oBAAsB,IAAI;;ACZT,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAH9B,IAAA,EAAA,QAAA,2BAGa,EACT,SAAC,GACD,YADC,IAAA,IAAA,EAAA,CAAkB,EAAG,EAAG,EAAG,IAC5B,WACI,MAAO,CACH,EAAG,EAAO,EAAI,EAAA,oBAAoB,SAAS,EAC3C,EAAG,EAAO,EAAI,EAAA,oBAAoB,SAAS,KAL1C,QAAA,kBAAiB;;ACCjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EALb,IAAA,EAAA,QAAA,iBAKA,EAAA,WAII,SAAA,EAA4B,EAA8B,GAA9B,KAAA,MAAA,EAA8B,KAAA,IAAA,EAHlD,KAAA,OAAiB,QAIrB,KAAK,QAAS,EAAA,EAAA,UAAS,KAAK,MAAO,KAAK,KAchD,OAXI,OAAA,eAAI,EAAA,UAAA,QAAK,CAAT,IAAA,WACI,OAAO,KAAK,QATP,YAAA,EAAA,cAAA,IAYT,EAAA,UAAA,KAAA,SAAK,GACD,EAAI,YAAc,KAAK,OACvB,EAAI,YACJ,EAAI,OAAO,KAAK,MAAM,EAAG,KAAK,MAAM,GACpC,EAAI,OAAO,KAAK,IAAI,EAAG,KAAK,IAAI,GAChC,EAAI,UAEZ,EAnBA,GAAa,QAAA,QAAA;;ACDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFb,IAAA,EAAA,QAAA,aAEA,EAAA,WACI,SAAA,EAAoB,QAAA,IAAA,IAAA,EAAA,IAAA,KAAA,QAAA,EAwDxB,OAtDW,EAAA,eAAP,WAMI,IALA,IAAM,EAAQ,KAAK,MAAsB,EAAhB,KAAK,UAAgB,EACxC,EAAU,IAAI,EAEd,EAAc,KAAK,SAAW,OAAO,WAArC,EAAoD,KAAK,SAAW,OAAO,YAExE,EAAI,EAAG,EAAI,EAAQ,EAAG,IAC3B,EAAQ,SAAS,CACb,EAAmB,IAAhB,KAAK,SAAiB,IAAM,EAC/B,EAAmB,IAAhB,KAAK,SAAiB,GAAK,IAKtC,OADA,EAAQ,SAAS,EAAQ,QAAQ,IAC1B,GAGJ,EAAA,gBAAP,WACI,IAAM,EAAwB,IAAhB,KAAK,SAAiB,GAC9B,EAAyB,IAAhB,KAAK,SAAiB,GAC/B,EAAK,KAAK,SAAW,OAAO,WAC5B,EAAK,KAAK,SAAW,OAAO,YAE5B,EAAU,IAAI,EAMpB,OALA,EAAQ,SAAS,CAAE,EAAG,EAAK,EAAQ,EAAG,EAAG,EAAK,EAAS,IACvD,EAAQ,SAAS,CAAE,EAAG,EAAK,EAAQ,EAAG,EAAG,EAAK,EAAS,IACvD,EAAQ,SAAS,CAAE,EAAG,EAAK,EAAQ,EAAG,EAAG,EAAK,EAAS,IACvD,EAAQ,SAAS,CAAE,EAAG,EAAK,EAAQ,EAAG,EAAG,EAAK,EAAS,IACvD,EAAQ,SAAS,EAAQ,QAAQ,IAC1B,GAGX,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WAEI,IADA,IAAM,EAAsB,GACnB,EAAI,EAAG,EAAI,KAAK,QAAQ,OAAS,EAAG,IACzC,EAAS,KAAK,IAAI,EAAA,QAAQ,KAAK,QAAQ,GAAI,KAAK,QAAQ,EAAI,KAEhE,OAAO,GAxCF,YAAA,EAAA,cAAA,IA2CT,EAAA,UAAA,SAAA,SAAS,GACL,KAAK,QAAQ,KAAK,IAGtB,EAAA,UAAA,KAAA,SAAK,GACD,EAAI,YAAc,QAClB,EAAI,UAAY,OAChB,EAAI,YACJ,EAAI,OAAO,KAAK,QAAQ,GAAG,EAAG,KAAK,QAAQ,GAAG,GAC9C,KAAK,QAAQ,QAAQ,SAAA,GAAS,OAAA,EAAI,OAAO,EAAM,EAAG,EAAM,KACxD,EAAI,YACJ,EAAI,UAGZ,EAzDA,GAAa,QAAA,QAAA;;ACFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAb,IAAA,EAAA,WACI,SAAA,EAA6B,EAAwB,GAAxB,KAAA,MAAA,EAAwB,KAAA,MAAA,EA+BzD,OA7BI,EAAA,UAAA,KAAA,SAAK,GACD,IACM,GACE,KAAK,MAAM,IAAI,EAAI,KAAK,MAAM,IAAI,GAAK,EADzC,GAEE,KAAK,MAAM,IAAI,EAAI,KAAK,MAAM,IAAI,GAAK,EAEzC,EAAS,KAAK,KAChB,KAAK,IAAI,EAAY,KAAK,MAAM,MAAM,EAAG,GAAK,KAAK,IAAI,EAAY,KAAK,MAAM,MAAM,EAAG,KACtF,EACC,EAAgB,CAClB,EAAG,GAAc,EAAY,KAAK,MAAM,MAAM,GAAK,EATlC,IAUjB,EAAG,GAAc,EAAY,KAAK,MAAM,MAAM,GAAK,EAVlC,KAYf,EAAW,EAAI,qBACjB,KAAK,MAAM,MAAM,EACjB,KAAK,MAAM,MAAM,EACjB,EAAc,EACd,EAAc,GAElB,EAAS,aAAa,EAAG,0BACzB,EAAS,aAAa,EAAG,oBACzB,EAAI,UAAY,EAChB,EAAI,YACJ,EAAI,OAAO,KAAK,MAAM,MAAM,EAAG,KAAK,MAAM,MAAM,GAChD,EAAI,OAAO,KAAK,MAAM,IAAI,EAAG,KAAK,MAAM,IAAI,GAC5C,EAAI,OAAO,KAAK,MAAM,IAAI,EAAG,KAAK,MAAM,IAAI,GAC5C,EAAI,OAAO,KAAK,MAAM,MAAM,EAAG,KAAK,MAAM,MAAM,GAChD,EAAI,QAEZ,EAhCA,GAAa,QAAA,UAAA;;ACMA,aAAA,IAAA,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,UAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,KAAA,IAAA,IAAA,EAAA,MAAA,UAAA,MAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,OAAA,GAAA,MAAA,UAAA,MAAA,KAAA,KAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EARb,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,yBACA,EAAA,QAAA,aAGA,EAAA,QAAA,gBAEA,EAAA,WAMI,SAAA,IALQ,KAAA,UAAuB,GACvB,KAAA,OAAiB,GACjB,KAAA,MAAe,GACf,KAAA,YAA2B,GAG/B,KAAK,kBAEL,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,IACpB,KAAK,UAAU,KAAK,EAAA,QAAQ,mBAGhC,KAAK,OAAO,KAAK,IAAI,EAAA,MAAK,EAAA,EAAA,uBAC1B,KAAK,OAAO,KAAK,IAAI,EAAA,MAAK,EAAA,EAAA,mBAAkB,CAAE,GAAI,GAAI,EAAG,MACzD,KAAK,OAAO,KAAK,IAAI,EAAA,MAAK,EAAA,EAAA,mBAAkB,CAAE,EAAG,GAAI,EAAG,MACxD,KAAK,OAAO,KAAK,IAAI,EAAA,MAAK,EAAA,EAAA,mBAAkB,CAAE,EAAG,EAAG,GAAI,OACxD,KAAK,OAAO,KAAK,IAAI,EAAA,MAAK,EAAA,EAAA,mBAAkB,CAAE,EAAG,EAAG,EAAG,OA4D/D,OAzDI,OAAA,eAAI,EAAA,UAAA,aAAU,CAAd,IAAA,WACI,OAAO,KAAK,aArBP,YAAA,EAAA,cAAA,IAwBT,OAAA,eAAI,EAAA,UAAA,YAAS,CAAb,IAAA,WACI,OAAA,EAAA,EAAA,GAAW,KAAK,WAAS,GAAK,KAAK,QAAM,IAzBpC,YAAA,EAAA,cAAA,IA4BT,OAAA,eAAI,EAAA,UAAA,YAAS,CAAb,IAAA,WACI,OAAO,KAAK,UAAU,QAAQ,SAAA,GAAW,OAAA,EAAQ,YA7B5C,YAAA,EAAA,cAAA,IAgCT,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,KACU,EAAK,YAAY,MACvB,KAAK,MAAQ,GACb,KAAK,OAAO,QAAQ,SAAA,GAnCf,IAAA,EAoCD,EAAK,UACL,EAAA,EAAK,OAAM,KAAI,MAAA,EAAI,EAAK,WAAW,EAAK,cAG5C,KAAK,MAAM,QAAQ,SAAA,GACf,EAAI,KAAK,EAAK,aAElB,KAAK,iBAEL,KAAK,WAAW,YAAY,MAAQ,IAGhC,EAAA,UAAA,gBAAR,WACI,IAAM,EAAc,OAAO,WACrB,EAAe,OAAO,YACtB,EAAc,IAAI,EAAA,QAAQ,CAC5B,CAAE,EAAG,EAAG,EAAG,GACX,CAAE,EAAG,EAAa,EAAG,GACrB,CAAE,EAAG,EAAa,EAAG,GACrB,CAAE,EAAG,EAAG,EAAG,GACX,CAAE,EAAG,EAAG,EAAG,KAEf,KAAK,UAAU,KAAK,IAGhB,EAAA,UAAA,eAAR,WACI,KAAK,YAAc,GAEnB,IADA,IAAM,EAAa,KAAK,MAAM,KAAK,SAAC,EAAG,GAAM,OAAA,EAAE,MAAQ,EAAE,QAChD,EAAI,EAAG,EAAI,EAAW,OAAQ,IAAK,CACxC,IAAM,EAAO,EAAW,GAClB,EAAO,GAAY,EAAI,GAAK,EAAW,QAC7C,KAAK,YAAY,KAAK,IAAI,EAAA,UAAU,EAAM,MAI1C,EAAA,UAAA,WAAR,SAAmB,GACf,IAAM,EAAqB,SAAS,eAAe,eAC/C,IACA,EAAmB,UAAY,oBAAA,OAAoB,EAAS,QAAQ,GAAE,QAGlF,EA7EA,GAAa,QAAA,MAAA;;ACLA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAHb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,WAEA,EAAA,WAKI,SAAA,IAAA,IAAA,EAAA,KAJQ,KAAA,QAAkB,IAAI,EAAA,OACtB,KAAA,OAAgB,IAAI,EAAA,MACpB,KAAA,YAAgC,IAAI,MAGxC,KAAK,YAAY,IAAM,2GACvB,KAAK,YAAY,OAAS,WACtB,EAAK,SAiBjB,OAdI,EAAA,UAAA,MAAA,WAAA,IAAA,EAAA,KACI,KAAK,UACL,KAAK,QACL,sBAAsB,WAAM,OAAA,EAAK,WAErC,EAAA,UAAA,QAAA,WACI,KAAK,OAAO,UAEhB,EAAA,UAAA,MAAA,WACI,KAAK,QAAQ,QACb,KAAK,QAAQ,KAAK,KAAK,OAAO,YAC9B,KAAK,QAAQ,eAAe,KAAK,aACjC,KAAK,QAAQ,KAAK,KAAK,OAAO,YAEtC,EAzBA,GAAa,QAAA,KAAA;;ACDU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFvB,IAAA,EAAA,QAAA,UAEM,EAAO,IAAI,EAAA","file":"main.b9aab3aa.js","sourceRoot":"..","sourcesContent":["import { Drawable } from \"./models/drawable.model\";\r\n\r\nexport class Canvas {\r\n    private _canvas: HTMLCanvasElement;\r\n    private _ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() {\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._setCanvasSize();\r\n        this._ctx = this._canvas.getContext(\"2d\")!;\r\n        document.body.appendChild(this._canvas);\r\n    }\r\n\r\n    private _setCanvasSize(): void {\r\n        this._canvas.width = window.innerWidth;\r\n        this._canvas.height = window.innerHeight;\r\n    }\r\n\r\n    clear(): void {\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.fillStyle = \"black\";\r\n        this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n\r\n    drawBackground(img: HTMLImageElement): void {\r\n        this._ctx.globalCompositeOperation = \"multiply\";\r\n        this._ctx.drawImage(img, 0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.globalCompositeOperation = \"source-over\";\r\n    }\r\n\r\n    draw(drawables: Drawable[]): void {\r\n        drawables.forEach(drawable => drawable.draw(this._ctx));\r\n    }\r\n}\r\n","import { Degrees, Radians } from \"../models/angle.model\";\r\nimport { Point } from \"../models/point.model\";\r\n\r\nexport const toRadians = (angle: Degrees): Radians => ((angle * Math.PI) / 180) as Radians;\r\n\r\nexport const normalize = (angle: Radians): Radians => {\r\n    const twoPi = 2 * Math.PI;\r\n    const normalized = angle % twoPi;\r\n    return (normalized >= 0 ? normalized : normalized + twoPi) as Radians;\r\n};\r\n\r\nexport const getAngle = (start: Point, end: Point): Radians => {\r\n    return normalize(Math.atan2(end.y - start.y, end.x - start.x) as Radians);\r\n};\r\n","import { Point, PointWithDistance } from \"../models/point.model\";\r\nimport { Ray } from \"../ray\";\r\nimport { Segment } from \"../segment\";\r\n\r\nexport const areParallel = (ray: Ray, segment: Segment): boolean => {\r\n    return ray.angle === segment.angle;\r\n};\r\n\r\nexport const getIntersection = (ray: Ray, segment: Segment): PointWithDistance | null => {\r\n    if (areParallel(ray, segment)) {\r\n        return null;\r\n    }\r\n\r\n    const x1 = ray.start.x;\r\n    const y1 = ray.start.y;\r\n    const x2 = ray.start.x + Math.cos(ray.angle);\r\n    const y2 = ray.start.y + Math.sin(ray.angle);\r\n    const x3 = segment.start.x;\r\n    const y3 = segment.start.y;\r\n    const x4 = segment.end.x;\r\n    const y4 = segment.end.y;\r\n\r\n    const denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n    if (denominator === 0) {\r\n        return null;\r\n    }\r\n\r\n    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denominator;\r\n    const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denominator;\r\n\r\n    if (t >= 0 && u >= 0 && u <= 1) {\r\n        return {\r\n            x: x1 + t * (x2 - x1),\r\n            y: y1 + t * (y2 - y1),\r\n            distance: t,\r\n        };\r\n    }\r\n\r\n    return null;\r\n};\r\n","import { Drawable } from \"./models/drawable.model\";\r\nimport { Radians } from \"./models/angle.model\";\r\nimport { Point } from \"./models/point.model\";\r\nimport { normalize } from \"./math/radian\";\r\nimport { Segment } from \"./segment\";\r\nimport { getIntersection } from \"./math/intersection\";\r\n\r\nexport class Ray implements Drawable {\r\n    private _color: string = \"red\";\r\n    private _end: Point | null = null;\r\n\r\n    constructor(public readonly start: Point, public readonly angle: Radians) {\r\n        this.angle = normalize(angle);\r\n    }\r\n\r\n    get end(): Point {\r\n        return this._end\r\n            ? this._end\r\n            : {\r\n                  x: this.start.x + Math.cos(this.angle) * 1000,\r\n                  y: this.start.y + Math.sin(this.angle) * 1000,\r\n              };\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this._color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.start.x, this.start.y);\r\n        ctx.lineTo(this.end.x, this.end.y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    cast(segments: Segment[]): void {\r\n        this._end = null;\r\n        let record = Infinity;\r\n\r\n        segments.forEach((segment) => {\r\n            const intersection = getIntersection(this, segment);\r\n            if (intersection && intersection.distance < record) {\r\n                record = intersection.distance;\r\n                this._end = intersection;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { getAngle } from \"./math/radian\";\r\nimport { Radians } from \"./models/angle.model\";\r\nimport { Drawable } from \"./models/drawable.model\";\r\nimport { Point } from \"./models/point.model\";\r\nimport { Placer } from \"./placer/placer.model\";\r\nimport { Ray } from \"./ray\";\r\nimport { Segment } from \"./segment\";\r\n\r\nexport class Lamp implements Drawable {\r\n    private _position: Point = { x: 0, y: 0 };\r\n\r\n    constructor(private readonly _getPlace: Placer) {}\r\n\r\n    get position(): Point {\r\n        return this._position;\r\n    }\r\n\r\n    update(): void {\r\n        this._updatePosition();\r\n    }\r\n\r\n    createRays(segments: Segment[]): Ray[] {\r\n        const edges = segments.flatMap(segment => [segment.start, segment.end]);\r\n        const uniqueAngles = new Set(\r\n            edges.flatMap(edge => {\r\n                const angle = getAngle(this._position, edge);\r\n                return [angle - 0.0001, angle, angle + 0.0001] as Radians[];\r\n            })\r\n        );\r\n        return Array.from(uniqueAngles).map(angle => new Ray(this._position, angle));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.fillStyle = \"yellow\";\r\n        ctx.beginPath();\r\n        ctx.arc(this._position.x, this._position.y, 5, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    }\r\n\r\n    private _updatePosition(): void {\r\n        this._position = this._getPlace();\r\n    }\r\n}\r\n","import { Point } from \"../models/point.model\";\r\n\r\nclass CursorPositionState {\r\n    private _position: Point = { x: 0, y: 0 };\r\n\r\n    constructor() {\r\n        window.addEventListener(\"mousemove\", (event) => {\r\n            this._position = { x: event.clientX, y: event.clientY };\r\n        });\r\n    }\r\n\r\n    get position(): Point {\r\n        return this._position;\r\n    }\r\n}\r\n\r\nexport const cursorPositionState = new CursorPositionState();\r\n","import { Point } from \"../models/point.model\";\r\nimport { cursorPositionState } from \"./cursor-position.state\";\r\nimport { Placer } from \"./placer.model\";\r\n\r\nexport const createMousePlacer =\r\n    (offset: Point = { x: 0, y: 0 }): Placer =>\r\n    () => {\r\n        return {\r\n            x: offset.x + cursorPositionState.position.x,\r\n            y: offset.y + cursorPositionState.position.y,\r\n        };\r\n    };\r\n","import { getAngle, normalize } from \"./math/radian\";\r\nimport { Radians } from \"./models/angle.model\";\r\nimport type { Drawable } from \"./models/drawable.model\";\r\nimport { Point } from \"./models/point.model\";\r\n\r\nexport class Segment implements Drawable {\r\n    private _color: string = \"black\";\r\n    private _angle: Radians;\r\n\r\n    constructor(public readonly start: Point, public readonly end: Point) {\r\n        this._angle = getAngle(this.start, this.end);\r\n    }\r\n\r\n    get angle(): number {\r\n        return this._angle;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = this._color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.start.x, this.start.y);\r\n        ctx.lineTo(this.end.x, this.end.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n","import { Drawable } from \"./models/drawable.model\";\r\nimport { Point } from \"./models/point.model\";\r\nimport { Segment } from \"./segment\";\r\n\r\nexport class Polygon implements Drawable {\r\n    constructor(private _points: Point[] = []) {}\r\n\r\n    static generateRandom(): Polygon {\r\n        const sides = Math.floor(Math.random() * 5) + 3;\r\n        const polygon = new Polygon();\r\n\r\n        const center = { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight };\r\n\r\n        for (let i = 0; i < sides - 1; i++) {\r\n            polygon.addPoint({\r\n                x: Math.random() * 200 - 100 + center.x,\r\n                y: Math.random() * 150 - 75 + center.y,\r\n            });\r\n        }\r\n\r\n        polygon.addPoint(polygon._points[0]);\r\n        return polygon;\r\n    }\r\n\r\n    static generateRegular(): Polygon {\r\n        const width = Math.random() * 100 + 50;\r\n        const height = Math.random() * 100 + 50;\r\n        const cx = Math.random() * window.innerWidth;\r\n        const cy = Math.random() * window.innerHeight;\r\n\r\n        const polygon = new Polygon();\r\n        polygon.addPoint({ x: cx - width / 2, y: cy - height / 2 });\r\n        polygon.addPoint({ x: cx + width / 2, y: cy - height / 2 });\r\n        polygon.addPoint({ x: cx + width / 2, y: cy + height / 2 });\r\n        polygon.addPoint({ x: cx - width / 2, y: cy + height / 2 });\r\n        polygon.addPoint(polygon._points[0]);\r\n        return polygon;\r\n    }\r\n\r\n    get segments(): Segment[] {\r\n        const segments: Segment[] = [];\r\n        for (let i = 0; i < this._points.length - 1; i++) {\r\n            segments.push(new Segment(this._points[i], this._points[i + 1]));\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    addPoint(point: Point): void {\r\n        this._points.push(point);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.fillStyle = \"blue\";\r\n        ctx.beginPath();\r\n        ctx.moveTo(this._points[0].x, this._points[0].y);\r\n        this._points.forEach(point => ctx.lineTo(point.x, point.y));\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        // ctx.fill();\r\n    }\r\n}\r\n","import { Drawable } from \"./models/drawable.model\";\r\n\r\nexport class SightZone implements Drawable {\r\n    constructor(private readonly _rayA, private readonly _rayB) {}\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const normalLength = 100;\r\n        const zoneEnd = {\r\n            x: (this._rayA.end.x + this._rayB.end.x) / 2,\r\n            y: (this._rayA.end.y + this._rayB.end.y) / 2,\r\n        };\r\n        const length = Math.sqrt(\r\n            Math.pow(zoneEnd.x - this._rayA.start.x, 2) + Math.pow(zoneEnd.y - this._rayA.start.y, 2)\r\n        ) || 1;\r\n        const normalizedEnd = {\r\n            x: zoneEnd.x + ((zoneEnd.x - this._rayA.start.x) / length) * normalLength,\r\n            y: zoneEnd.y + ((zoneEnd.y - this._rayA.start.y) / length) * normalLength,\r\n        };\r\n        const gradient = ctx.createLinearGradient(\r\n            this._rayA.start.x,\r\n            this._rayA.start.y,\r\n            normalizedEnd.x,\r\n            normalizedEnd.y\r\n        );\r\n        gradient.addColorStop(0, \"rgba(255, 255, 255, 1)\");\r\n        gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\");\r\n        ctx.fillStyle = gradient;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this._rayA.start.x, this._rayA.start.y);\r\n        ctx.lineTo(this._rayA.end.x, this._rayA.end.y);\r\n        ctx.lineTo(this._rayB.end.x, this._rayB.end.y);\r\n        ctx.lineTo(this._rayB.start.x, this._rayB.start.y);\r\n        ctx.fill();\r\n    }\r\n}\r\n","import { Lamp } from \"./lamp\";\r\nimport { Drawable } from \"./models/drawable.model\";\r\nimport { createMousePlacer } from \"./placer/mouse.placer\";\r\nimport { Polygon } from \"./polygon\";\r\nimport { Ray } from \"./ray\";\r\nimport { Segment } from \"./segment\";\r\nimport { SightZone } from \"./sight-zone\";\r\n\r\nexport class Scene {\r\n    private _polygons: Polygon[] = [];\r\n    private _lamps: Lamp[] = [];\r\n    private _rays: Ray[] = [];\r\n    private _sightZones: SightZone[] = [];\r\n\r\n    constructor() {\r\n        this._addEdgePolygon();\r\n\r\n        for (let i = 0; i < 25; i++) {\r\n            this._polygons.push(Polygon.generateRegular());\r\n        }\r\n\r\n        this._lamps.push(new Lamp(createMousePlacer()));\r\n        this._lamps.push(new Lamp(createMousePlacer({ x: -10, y: 0 })));\r\n        this._lamps.push(new Lamp(createMousePlacer({ x: 10, y: 0 })));\r\n        this._lamps.push(new Lamp(createMousePlacer({ x: 0, y: -10 })));\r\n        this._lamps.push(new Lamp(createMousePlacer({ x: 0, y: 10 })));\r\n    }\r\n\r\n    get sightZones(): SightZone[] {\r\n        return this._sightZones;\r\n    }\r\n\r\n    get drawables(): Drawable[] {\r\n        return [...this._polygons, ...this._lamps];\r\n    }\r\n\r\n    get _segments(): Segment[] {\r\n        return this._polygons.flatMap(polygon => polygon.segments);\r\n    }\r\n\r\n    update(): void {\r\n        const t1 = performance.now();\r\n        this._rays = [];\r\n        this._lamps.forEach(lamp => {\r\n            lamp.update();\r\n            this._rays.push(...lamp.createRays(this._segments));\r\n        });\r\n\r\n        this._rays.forEach(ray => {\r\n            ray.cast(this._segments);\r\n        });\r\n        this._addSightZones();\r\n\r\n        this._perfStats(performance.now() - t1);\r\n    }\r\n\r\n    private _addEdgePolygon(): void {\r\n        const screenWidth = window.innerWidth;\r\n        const screenHeight = window.innerHeight;\r\n        const edgePolygon = new Polygon([\r\n            { x: 0, y: 0 },\r\n            { x: screenWidth, y: 0 },\r\n            { x: screenWidth, y: screenHeight },\r\n            { x: 0, y: screenHeight },\r\n            { x: 0, y: 0 },\r\n        ]);\r\n        this._polygons.push(edgePolygon);\r\n    }\r\n\r\n    private _addSightZones(): void {\r\n        this._sightZones = [];\r\n        const sortedRays = this._rays.sort((a, b) => a.angle - b.angle);\r\n        for (let i = 0; i < sortedRays.length; i++) {\r\n            const rayA = sortedRays[i];\r\n            const rayB = sortedRays[(i + 1) % sortedRays.length];\r\n            this._sightZones.push(new SightZone(rayA, rayB));\r\n        }\r\n    }\r\n\r\n    private _perfStats(duration: number): void {\r\n        const performanceElement = document.getElementById(\"performance\");\r\n        if (performanceElement) {\r\n            performanceElement.innerText = `Update duration: ${duration.toFixed(2)}ms`;\r\n        }\r\n    }\r\n}\r\n","import { Canvas } from \"./canvas\";\r\nimport { Scene } from \"./scene\";\r\n\r\nexport class Game {\r\n    private _canvas: Canvas = new Canvas();\r\n    private _scene: Scene = new Scene();\r\n    private _background: HTMLImageElement = new Image();\r\n\r\n    constructor() {\r\n        this._background.src = \"https://steamuserimages-a.akamaihd.net/ugc/2058741574591783688/9C6BAD68B0072EBC34EAEE00DEE08662DE28BB27/\";\r\n        this._background.onload = () => {\r\n            this._loop();\r\n        };\r\n    }\r\n    _loop() {\r\n        this._update();\r\n        this._draw();\r\n        requestAnimationFrame(() => this._loop());\r\n    }\r\n    _update() {\r\n        this._scene.update();\r\n    }\r\n    _draw() {\r\n        this._canvas.clear();\r\n        this._canvas.draw(this._scene.sightZones);\r\n        this._canvas.drawBackground(this._background);\r\n        this._canvas.draw(this._scene.drawables);\r\n    }\r\n}\r\n","import { Game } from \"./game\";\r\n\r\nconst game = new Game();\r\n"]}